// Note: This file is autogenerated. Do not edit it directly.
//
// Describes the contents of the test directory, which is a blueprint for
// files and directories. Tests can create a unique, safe environment for
// interacting with the contents of such a directory.
//
// Having strong typing for the test directory contents ensures that tests can
// be written with confidence that the files and directories they expect are
// actually found. Otherwise the tests are brittle and can break easily.

import * as z from "zod"

export const MyTestDirectorySchema = z.object({
  name: z.literal("test-environment/"),
  type: z.literal("directory"),
  contents: z.object({
    ".bashrc": z.object({
      name: z.literal(".bashrc"),
      type: z.literal("file"),
    }),
    ".config": z.object({
      name: z.literal(".config/"),
      type: z.literal("directory"),
      contents: z.object({
        yazi: z.object({
          name: z.literal("yazi/"),
          type: z.literal("directory"),
          contents: z.object({
            "init.lua": z.object({
              name: z.literal("init.lua"),
              type: z.literal("file"),
            }),
            "keymap.toml": z.object({
              name: z.literal("keymap.toml"),
              type: z.literal("file"),
            }),
          }),
        }),
      }),
    }),
    "config-modifications": z.object({
      name: z.literal("config-modifications/"),
      type: z.literal("directory"),
      contents: z.object({
        "customize_colors.lua": z.object({
          name: z.literal("customize_colors.lua"),
          type: z.literal("file"),
        }),
      }),
    }),
    "dir-with-jumpable-files": z.object({
      name: z.literal("dir-with-jumpable-files/"),
      type: z.literal("directory"),
      contents: z.object({
        file1: z.object({ name: z.literal("file1"), type: z.literal("file") }),
        file2: z.object({ name: z.literal("file2"), type: z.literal("file") }),
      }),
    }),
  }),
})

export const MyTestDirectoryContentsSchema =
  MyTestDirectorySchema.shape.contents
export type MyTestDirectoryContentsSchemaType = z.infer<
  typeof MyTestDirectorySchema
>

export type MyTestDirectory = MyTestDirectoryContentsSchemaType["contents"]

export const testDirectoryFiles = z.enum([
  ".bashrc",
  ".config/yazi/init.lua",
  ".config/yazi/keymap.toml",
  ".config/yazi",
  ".config",
  "config-modifications/customize_colors.lua",
  "config-modifications",
  "dir-with-jumpable-files/file1",
  "dir-with-jumpable-files/file2",
  "dir-with-jumpable-files",
  ".",
])
export type MyTestDirectoryFile = z.infer<typeof testDirectoryFiles>
